/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BackItUpPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// actions.ts
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var import_fs = require("fs");

// utils.ts
function getTimestamp() {
  const timestamp = new Date();
  const year = String(timestamp.getFullYear()).padStart(4, "0");
  const month = String(timestamp.getMonth() + 1).padStart(2, "0");
  const day = String(timestamp.getDate()).padStart(2, "0");
  const hours = String(timestamp.getHours()).padStart(2, "0");
  const minutes = String(timestamp.getMinutes()).padStart(2, "0");
  const seconds = String(timestamp.getSeconds()).padStart(2, "0");
  const formattedTimestamp = `${year}${month}${day}-${hours}${minutes}${seconds}`;
  return formattedTimestamp;
}

// actions.ts
async function makeCopyOfNote(file) {
  var _a;
  const fileObj = file;
  const vaultPath = this.app.vault.adapter.basePath;
  const timestamp = getTimestamp();
  const srcFilePath = path.join(vaultPath, file.path);
  const destFilePath = path.join(
    vaultPath,
    (_a = file.parent) == null ? void 0 : _a.path,
    `${fileObj.basename} (${timestamp}).${fileObj.extension}`
  );
  try {
    await import_fs.promises.copyFile(srcFilePath, destFilePath);
    new import_obsidian.Notice("Copy created.");
    console.log(`BackItUp: Copy created as "${file.name} (${timestamp})"`);
  } catch (err) {
    console.error("Error:", err.message);
  }
}
async function makeSnapshotOfNote(file) {
  const fileObj = file;
  const vaultPath = this.app.vault.adapter.basePath;
  const timestamp = getTimestamp();
  const snapshotFolderName = this.settings.snapshotFolderName;
  const snapshotFolderPath = path.join(vaultPath, snapshotFolderName);
  const snapshotFileName = `${fileObj.basename} (${timestamp}).${fileObj.extension}`;
  const srcFilePath = path.join(vaultPath, file.path);
  const destFilePath = path.join(snapshotFolderPath, snapshotFileName);
  console.log(srcFilePath, destFilePath);
  try {
    await import_fs.promises.mkdir(snapshotFolderPath, {
      recursive: true
    });
    await import_fs.promises.copyFile(srcFilePath, destFilePath);
    new import_obsidian.Notice("Snapshot created.");
    console.log(`BackItUp: Snapshot created to "${snapshotFolderName}"`);
  } catch (err) {
    console.error("Error:", err.message);
  }
}

// main.ts
var DEFAULT_SETTINGS = {
  snapshotFolderName: "\u{1F7E3} Archive"
};
var BackItUpPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("BackItUp: Loading plugin...");
    this.addSettingTab(new BackItUpSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem(
          (item) => item.setTitle("Make a copy").setIcon("copy").onClick(async () => {
            await makeCopyOfNote.bind(this)(file);
          })
        );
        menu.addItem(
          (item) => item.setTitle("Take a snapshot").setIcon("copy-plus").onClick(async () => {
            await makeSnapshotOfNote.bind(this)(file);
          })
        );
      })
    );
  }
  onunload() {
    console.log("BackItUp: Unloading plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BackItUpSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Snapshot folder").setDesc(
      'Snapshot notes will be copied to this folder. Example: "Archive\\My snapshots"'
    ).addText(
      (text) => text.setPlaceholder("Enter folder name").setValue(this.plugin.settings.snapshotFolderName).onChange(async (value) => {
        this.plugin.settings.snapshotFolderName = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

/* nosourcemap */